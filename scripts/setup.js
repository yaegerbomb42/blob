#!/usr/bin/env node
// Simple setup script: prints Plash instructions and offers to install a systemd --user service
// for auto-starting `npm run serve` on login (Linux). Non-destructive and idempotent.

const os = require('os');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const SERVICE_NAME = 'blob-desktop-agent';
const SERVICE_FILE = `${SERVICE_NAME}.service`;

function printHeader() {
  console.log('\nBlob Desktop Agent â€” Quick Setup');
  console.log('================================');
}

function printPlashHelp(port) {
  console.log('\nPlash / Overlay Usage:');
  console.log('1) Start the local server:');
  console.log('   npm run serve');
  console.log(`2) Point Plash (or any overlay browser) to: http://localhost:${port}`);
  console.log('3) To auto-start at login, use the systemd setup below.');
}

function getSystemdPaths() {
  const home = os.homedir();
  const userDir = path.join(home, '.config', 'systemd', 'user');
  const servicePath = path.join(userDir, SERVICE_FILE);
  return { userDir, servicePath };
}

function ensureDir(p) {
  fs.mkdirSync(p, { recursive: true });
}

function writeService(servicePath) {
  const node = process.execPath;
  const repoDir = process.cwd();
  const envLines = [
    `Environment=GEMINI_API_KEY=${process.env.GEMINI_API_KEY || ''}`,
    `Environment=PORT=${process.env.PORT || 3264}`,
  ].join('\n');
  const content = `# Auto-generated by scripts/setup.js\n[Unit]\nDescription=Blob Desktop Agent (web server)\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=simple\nWorkingDirectory=${repoDir}\n${envLines}\nExecStart=${node} ${path.join(repoDir, 'server.js')}\nRestart=on-failure\nRestartSec=3\n\n[Install]\nWantedBy=default.target\n`;
  fs.writeFileSync(servicePath, content, 'utf8');
}

function ask(q) {
  const rl = readline.createInterface({ input: process.stdin, output: process.stdout });
  return new Promise((resolve) => rl.question(q, (ans) => { rl.close(); resolve(ans.trim()); }));
}

async function main() {
  printHeader();
  const PORT = process.env.PORT || 3264;
  printPlashHelp(PORT);

  if (process.platform !== 'linux') {
    console.log('\nAuto-start: systemd user services are only configured on Linux in this helper.');
    console.log('On macOS, consider using launchd or a tool like Plash + keeping the server running.');
    return;
  }

  const ans = (await ask('\nSet up auto-start on login via systemd --user? (y/N): ')).toLowerCase();
  if (ans !== 'y' && ans !== 'yes') {
    console.log('Skipping systemd setup. You can re-run: node scripts/setup.js');
    return;
  }

  const { userDir, servicePath } = getSystemdPaths();
  ensureDir(userDir);
  writeService(servicePath);
  console.log(`\nWrote service file: ${servicePath}`);

  console.log('\nNext commands (run manually):');
  console.log('  systemctl --user daemon-reload');
  console.log(`  systemctl --user enable ${SERVICE_NAME}`);
  console.log(`  systemctl --user start ${SERVICE_NAME}`);
  console.log('\nTip: to view logs:');
  console.log(`  journalctl --user -u ${SERVICE_NAME} -f`);
}

main().catch((e) => {
  console.error('Setup failed:', e.message);
  process.exit(1);
});
